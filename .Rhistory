?<<-
?solve
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
myMatrix <- x$get()
inv <- solve(myMatrix, ...)
x$setInv(inv)
inv
}
?matrix
x <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)
x
solve(x)
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
solve(c) %*% c
cacheSolve(c)
makeCacheMatrix(c)
cacheSolve(c)
c$get()
jenny <- makeCacheMatrix(c)
cacheSolve(jenny)
cacheSolve(jenny)
a <- makeCacheMatrix(matrix(1:4,2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
myMatrix <- x$get()
inv <- solve(myMatrix, ...)
x$setInv(inv)
inv
}
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInv()
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached inverse matrix")
return(inv)
}
myMatrix <- x$get()
inv <- solve(myMatrix, ...)
x$setInv(inv)
inv
}
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
a$getInv()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInv()
b = a$getInv()
a$get() %*% b
